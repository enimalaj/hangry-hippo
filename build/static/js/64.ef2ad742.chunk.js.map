{"version":3,"sources":["sections/auth/verify-code/VerifyCodeForm.js","pages/auth/VerifyCode.js"],"names":["VerifyCodeForm","navigate","useNavigate","enqueueSnackbar","useSnackbar","VerifyCodeSchema","Yup","shape","code1","required","code2","code3","code4","code5","code6","useForm","mode","resolver","yupResolver","defaultValues","watch","control","setValue","handleSubmit","formState","isSubmitting","isValid","values","useEffect","document","addEventListener","handlePasteClipboard","onSubmit","data","a","Promise","resolve","setTimeout","console","log","Object","join","PATH_DASHBOARD","root","replace","error","event","clipboardData","getData","split","forEach","call","querySelectorAll","node","index","value","fieldIndex","Stack","direction","spacing","justifyContent","keys","map","name","render","field","OutlinedInput","id","autoFocus","placeholder","onChange","handleChange","target","maxLength","fieldIntIndex","Number","length","nextfield","querySelector","focus","handleChangeWithNextField","inputProps","sx","p","textAlign","width","xs","sm","height","LoadingButton","fullWidth","size","type","variant","loading","disabled","mt","RootStyle","styled","display","alignItems","padding","theme","VerifyCode","Page","title","LogoOnlyLayout","Container","Box","maxWidth","mx","Button","component","RouterLink","to","PATH_AUTH","login","startIcon","Iconify","icon","mb","Typography","paragraph","color","align","Link","underline","onClick"],"mappings":"4ZAee,SAASA,IACtB,IAAMC,EAAWC,cAETC,EAAoBC,cAApBD,gBAEFE,EAAmBC,MAAaC,MAAM,CAC1CC,MAAOF,MAAaG,SAAS,oBAC7BC,MAAOJ,MAAaG,SAAS,oBAC7BE,MAAOL,MAAaG,SAAS,oBAC7BG,MAAON,MAAaG,SAAS,oBAC7BI,MAAOP,MAAaG,SAAS,oBAC7BK,MAAOR,MAAaG,SAAS,sBAY/B,EAMIM,YAAQ,CACVC,KAAM,SACNC,SAAUC,YAAYb,GACtBc,cAlBoB,CACpBX,MAAO,GACPE,MAAO,GACPC,MAAO,GACPC,MAAO,GACPC,MAAO,GACPC,MAAO,MAIPM,EADF,EACEA,MACAC,EAFF,EAEEA,QACAC,EAHF,EAGEA,SACAC,EAJF,EAIEA,aAJF,IAKEC,UAAaC,EALf,EAKeA,aAAcC,EAL7B,EAK6BA,QAOvBC,EAASP,IAEfQ,qBAAU,WACRC,SAASC,iBAAiB,QAASC,KAElC,IAEH,IAAMC,EAAQ,uCAAG,WAAOC,GAAP,SAAAC,EAAA,+EAEP,IAAIC,SAAQ,SAACC,GAAD,OAAaC,WAAWD,EAAS,QAFtC,OAGbE,QAAQC,IAAI,QAASC,OAAOb,OAAOM,GAAMQ,KAAK,KAE9CtC,EAAgB,mBAEhBF,EAASyC,IAAeC,KAAM,CAAEC,SAAS,IAP5B,gDASbN,QAAQO,MAAR,MATa,yDAAH,sDAaRd,EAAuB,SAACe,GAAW,IAAD,EAClCb,GAAY,OAALa,QAAK,IAALA,GAAA,UAAAA,EAAOC,qBAAP,eAAsBC,QAAQ,UAAW,GAEpDf,EAAOA,EAAKgB,MAAM,IAElB,GAAGC,QAAQC,KAAKtB,SAASuB,iBAAiB,gBAAgB,SAACC,EAAMC,GAC/DD,EAAKE,MAAQtB,EAAKqB,GAClB,IAAME,EAAU,cAAUF,EAAQ,GAClChC,EAASkC,EAAYvB,EAAKqB,QAuB9B,OACE,uBAAMtB,SAAUT,EAAaS,GAA7B,UACE,cAACyB,EAAA,EAAD,CAAOC,UAAU,MAAMC,QAAS,EAAGC,eAAe,SAAlD,SACGpB,OAAOqB,KAAKlC,GAAQmC,KAAI,SAACC,EAAMT,GAAP,OACvB,cAAC,IAAD,CAEES,KAAI,cAAST,EAAQ,GACrBjC,QAASA,EACT2C,OAAQ,gBAAGC,EAAH,EAAGA,MAAH,OACN,cAACC,EAAA,EAAD,2BACMD,GADN,IAEEE,GAAG,aACHC,UAAqB,IAAVd,EACXe,YAAY,IACZC,SAAU,SAACxB,GAAD,OAjCU,SAACA,EAAOyB,GACxC,MAAmCzB,EAAM0B,OAAjCC,EAAR,EAAQA,UAAWlB,EAAnB,EAAmBA,MACbC,EADN,EAA0BO,KACFnB,QAAQ,OAAQ,IAElC8B,EAAgBC,OAAOnB,GAE7B,GAAID,EAAMqB,QAAUH,GACdC,EAAgB,EAAG,CACrB,IAAMG,EAAYhD,SAASiD,cAAT,yBAAyCJ,EAAgB,EAAzD,MAEA,OAAdG,GACFA,EAAUE,QAKhBR,EAAazB,GAiBoBkC,CAA0BlC,EAAOmB,EAAMK,WAC5DW,WAAY,CACVR,UAAW,EACXS,GAAI,CACFC,EAAG,EACHC,UAAW,SACXC,MAAO,CAAEC,GAAI,GAAIC,GAAI,IACrBC,OAAQ,CAAEF,GAAI,GAAIC,GAAI,WAhBzBxB,QAyBX,cAAC0B,EAAA,EAAD,CACEC,WAAS,EACTC,KAAK,QACLC,KAAK,SACLC,QAAQ,YACRC,QAASrE,EACTsE,UAAWrE,EACXwD,GAAI,CAAEc,GAAI,GAPZ,uBCnHN,IAAMC,EAAYC,YAAO,MAAPA,EAAc,kBAAgB,CAC9CC,QAAS,OACTX,OAAQ,OACRY,WAAY,SACZC,QAJ8B,EAAGC,MAIlB3C,QAAQ,GAAI,OAKd,SAAS4C,IACtB,OACE,cAACC,EAAA,EAAD,CAAMC,MAAM,SAASvB,GAAI,CAAEM,OAAQ,GAAnC,SACE,eAACS,EAAD,WACE,cAACS,EAAA,EAAD,IAEA,cAACC,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,CAAK1B,GAAI,CAAE2B,SAAU,IAAKC,GAAI,QAA9B,UACE,cAACC,EAAA,EAAD,CACEpB,KAAK,QACLqB,UAAWC,IACXC,GAAIC,IAAUC,MACdC,UAAW,cAACC,EAAA,EAAD,CAASC,KAAM,0BAA2BlC,MAAO,GAAIG,OAAQ,KACxEN,GAAI,CAAEsC,GAAI,GALZ,kBAUA,cAACC,EAAA,EAAD,CAAY5B,QAAQ,KAAK6B,WAAS,EAAlC,sCAGA,cAACD,EAAA,EAAD,CAAYvC,GAAI,CAAEyC,MAAO,kBAAzB,iIAKA,cAACf,EAAA,EAAD,CAAK1B,GAAI,CAAEc,GAAI,EAAGwB,GAAI,GAAtB,SACE,cAACxH,EAAD,MAGF,eAACyH,EAAA,EAAD,CAAY5B,QAAQ,QAAQ+B,MAAM,SAAlC,yCAEE,cAACC,EAAA,EAAD,CAAMhC,QAAQ,YAAYiC,UAAU,OAAOC,QAAS,aAApD","file":"static/js/64.ef2ad742.chunk.js","sourcesContent":["import * as Yup from 'yup';\nimport { useSnackbar } from 'notistack';\nimport { useNavigate } from 'react-router-dom';\nimport { useEffect } from 'react';\n// form\nimport { useForm, Controller } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\n// @mui\nimport { OutlinedInput, Stack } from '@mui/material';\nimport { LoadingButton } from '@mui/lab';\n// routes\nimport { PATH_DASHBOARD } from '../../../routes/paths';\n\n// ----------------------------------------------------------------------\n\nexport default function VerifyCodeForm() {\n  const navigate = useNavigate();\n\n  const { enqueueSnackbar } = useSnackbar();\n\n  const VerifyCodeSchema = Yup.object().shape({\n    code1: Yup.string().required('Code is required'),\n    code2: Yup.string().required('Code is required'),\n    code3: Yup.string().required('Code is required'),\n    code4: Yup.string().required('Code is required'),\n    code5: Yup.string().required('Code is required'),\n    code6: Yup.string().required('Code is required'),\n  });\n\n  const defaultValues = {\n    code1: '',\n    code2: '',\n    code3: '',\n    code4: '',\n    code5: '',\n    code6: '',\n  };\n\n  const {\n    watch,\n    control,\n    setValue,\n    handleSubmit,\n    formState: { isSubmitting, isValid },\n  } = useForm({\n    mode: 'onBlur',\n    resolver: yupResolver(VerifyCodeSchema),\n    defaultValues,\n  });\n\n  const values = watch();\n\n  useEffect(() => {\n    document.addEventListener('paste', handlePasteClipboard);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const onSubmit = async (data) => {\n    try {\n      await new Promise((resolve) => setTimeout(resolve, 500));\n      console.log('code:', Object.values(data).join(''));\n\n      enqueueSnackbar('Verify success!');\n\n      navigate(PATH_DASHBOARD.root, { replace: true });\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const handlePasteClipboard = (event) => {\n    let data = event?.clipboardData?.getData('Text') || '';\n\n    data = data.split('');\n\n    [].forEach.call(document.querySelectorAll('#field-code'), (node, index) => {\n      node.value = data[index];\n      const fieldIndex = `code${index + 1}`;\n      setValue(fieldIndex, data[index]);\n    });\n  };\n\n  const handleChangeWithNextField = (event, handleChange) => {\n    const { maxLength, value, name } = event.target;\n    const fieldIndex = name.replace('code', '');\n\n    const fieldIntIndex = Number(fieldIndex);\n\n    if (value.length >= maxLength) {\n      if (fieldIntIndex < 6) {\n        const nextfield = document.querySelector(`input[name=code${fieldIntIndex + 1}]`);\n\n        if (nextfield !== null) {\n          nextfield.focus();\n        }\n      }\n    }\n\n    handleChange(event);\n  };\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <Stack direction=\"row\" spacing={2} justifyContent=\"center\">\n        {Object.keys(values).map((name, index) => (\n          <Controller\n            key={name}\n            name={`code${index + 1}`}\n            control={control}\n            render={({ field }) => (\n              <OutlinedInput\n                {...field}\n                id=\"field-code\"\n                autoFocus={index === 0}\n                placeholder=\"-\"\n                onChange={(event) => handleChangeWithNextField(event, field.onChange)}\n                inputProps={{\n                  maxLength: 1,\n                  sx: {\n                    p: 0,\n                    textAlign: 'center',\n                    width: { xs: 36, sm: 56 },\n                    height: { xs: 36, sm: 56 },\n                  },\n                }}\n              />\n            )}\n          />\n        ))}\n      </Stack>\n\n      <LoadingButton\n        fullWidth\n        size=\"large\"\n        type=\"submit\"\n        variant=\"contained\"\n        loading={isSubmitting}\n        disabled={!isValid}\n        sx={{ mt: 3 }}\n      >\n        Verify\n      </LoadingButton>\n    </form>\n  );\n}\n","import { Link as RouterLink } from 'react-router-dom';\n// @mui\nimport { styled } from '@mui/material/styles';\nimport { Box, Button, Link, Container, Typography } from '@mui/material';\n// layouts\nimport LogoOnlyLayout from '../../layouts/LogoOnlyLayout';\n// routes\nimport { PATH_AUTH } from '../../routes/paths';\n// components\nimport Page from '../../components/Page';\nimport Iconify from '../../components/Iconify';\n// sections\nimport { VerifyCodeForm } from '../../sections/auth/verify-code';\n\n// ----------------------------------------------------------------------\n\nconst RootStyle = styled('div')(({ theme }) => ({\n  display: 'flex',\n  height: '100%',\n  alignItems: 'center',\n  padding: theme.spacing(12, 0),\n}));\n\n// ----------------------------------------------------------------------\n\nexport default function VerifyCode() {\n  return (\n    <Page title=\"Verify\" sx={{ height: 1 }}>\n      <RootStyle>\n        <LogoOnlyLayout />\n\n        <Container>\n          <Box sx={{ maxWidth: 480, mx: 'auto' }}>\n            <Button\n              size=\"small\"\n              component={RouterLink}\n              to={PATH_AUTH.login}\n              startIcon={<Iconify icon={'eva:arrow-ios-back-fill'} width={20} height={20} />}\n              sx={{ mb: 3 }}\n            >\n              Back\n            </Button>\n\n            <Typography variant=\"h3\" paragraph>\n              Please check your email!\n            </Typography>\n            <Typography sx={{ color: 'text.secondary' }}>\n              We have emailed a 6-digit confirmation code to acb@domain, please enter the code in below box to verify\n              your email.\n            </Typography>\n\n            <Box sx={{ mt: 5, mb: 3 }}>\n              <VerifyCodeForm />\n            </Box>\n\n            <Typography variant=\"body2\" align=\"center\">\n              Don’t have a code? &nbsp;\n              <Link variant=\"subtitle2\" underline=\"none\" onClick={() => {}}>\n                Resend code\n              </Link>\n            </Typography>\n          </Box>\n        </Container>\n      </RootStyle>\n    </Page>\n  );\n}\n"],"sourceRoot":""}